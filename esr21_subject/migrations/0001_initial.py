# Generated by Django 3.1.4 on 2021-09-13 17:29

import _socket
from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import django_countries.fields
import django_crypto_fields.fields.encrypted_char_field
import django_crypto_fields.fields.encrypted_text_field
import django_crypto_fields.fields.firstname_field
import django_crypto_fields.fields.identity_field
import django_crypto_fields.fields.lastname_field
import django_revision.revision_field
import edc_base.model_fields.custom_fields
import edc_base.model_fields.date_estimated
import edc_base.model_fields.hostname_modification_field
import edc_base.model_fields.userfield
import edc_base.model_fields.uuid_auto_field
import edc_base.model_validators.date
import edc_base.model_validators.phone
import edc_base.sites.managers
import edc_base.utils
import edc_consent.validators
import edc_protocol.validators
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AdverseEvent',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date and Time')),
                ('experienced_ae', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Did the participant experience any Adverse Event?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'Adverse Event',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Contraception',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='COVIDSymptoms',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Diseases',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MaternalDiagnosesList',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MedicationIndication',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ParticipantMedications',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PriorArv',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SAECriteria',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SubjectRace',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SubjectVisit',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(editable=False, max_length=25)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('visit_code_sequence', models.IntegerField(blank=True, default=0, help_text='An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)', null=True, verbose_name='Sequence')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of this report', validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Visit Date and Time')),
                ('reason_unscheduled_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If "Other" reason for unscheduled visit, specify')),
                ('reason_missed_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If "Other" reason for missed visit, specify')),
                ('study_status', models.CharField(max_length=50, null=True, verbose_name="What is the participant's current study status")),
                ('require_crfs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name='Are scheduled data being submitted with this visit?')),
                ('info_source_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If "Other" source of information, specify')),
                ('survival_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Deceased'), ('unknown', 'Unknown')], default='alive', max_length=10, null=True, verbose_name="Participant's survival status")),
                ('last_alive_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date participant last known alive')),
                ('comments', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment if any additional pertinent information about the participant')),
                ('reason', models.CharField(choices=[('scheduled', 'Scheduled visit/contact'), ('missed', 'Did not attend scheduled visit'), ('unscheduled', 'Unscheduled visit/contact'), ('lost', 'Use only when withdrawing subject off study'), ('completed protocol', 'Subject has completed the study')], max_length=25, verbose_name='What is the reason for this visit report?')),
                ('reason_missed', models.CharField(blank=True, max_length=250, null=True, verbose_name="If 'Did not attend scheduled visit' is detailed above, reason visit was not attended.")),
                ('reason_unscheduled', models.CharField(blank=True, max_length=25, null=True, verbose_name="If 'Unscheduled' above, provide reason for the unscheduled visit")),
                ('info_source', models.CharField(choices=[('clinic_visit_w_subject', 'Clinic visit with participant'), ('other_contact_w_subject', 'Other contact with participant (i.e telephone call)'), ('contact_w_health_worker', 'Contact with health care worker'), ('Contact_w_family_design', 'Contact with family or designated person who can provide information'), ('OTHER', 'Other,specify')], max_length=40, verbose_name='What is the main source of this information?')),
                ('appointment', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='edc_appointment.appointment')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'Subject Visit',
                'ordering': ('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'visit_code_sequence', 'report_datetime'),
                'abstract': False,
                'unique_together': {('subject_identifier', 'visit_schedule_name', 'schedule_name', 'report_datetime'), ('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'visit_code_sequence')},
            },
            managers=[
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='SymptomaticInfections',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Symptoms',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WcsDxAdult',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VitalSigns',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date and Time')),
                ('vital_signs_measured', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Were the vital signs measurements performed?')),
                ('reason_vitals_nd', models.CharField(choices=[('not_collected', 'Not collected'), ('not_required', 'Not required at this visit'), ('measurement_skipped', 'Measurement skipped at this visit'), ('subject_refused', 'Subject refused'), ('equipment_malfunction', 'Equipment malfunction'), ('staff_unavailable', 'Staff unavailable'), ('no_information', 'No further information'), ('N/A', 'Not applicable')], default='N/A', max_length=30, verbose_name='If No, Reason Not Done')),
                ('assessment_dt', models.DateTimeField(blank=True, null=True, validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Date and Time of Assessment')),
                ('systolic_bp', models.PositiveIntegerField(blank=True, help_text='Fixed Unit: mmHg', null=True, validators=[django.core.validators.MinValueValidator(75), django.core.validators.MaxValueValidator(220)], verbose_name='Systolic Blood Pressure')),
                ('diastolic_bp', models.PositiveIntegerField(blank=True, help_text='Fixed Unit: mmHg', null=True, validators=[django.core.validators.MinValueValidator(55), django.core.validators.MaxValueValidator(150)], verbose_name='Diastolic Blood Pressure')),
                ('heart_rate', models.PositiveIntegerField(blank=True, help_text='beats/min', null=True, verbose_name='Heart Rate')),
                ('body_temp', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(30, message='Cannot below 30'), django.core.validators.MaxValueValidator(60, message='Cannot be above 60')], verbose_name='Body Temperature')),
                ('body_temp_unit', models.CharField(choices=[('celcius', 'Celcius (ºC)'), ('fahrenheit', 'Fahrenheit (ºF)'), ('N/A', 'Not Applicable')], max_length=15, verbose_name='Unit of temperature')),
                ('oxygen_saturated', models.DecimalField(decimal_places=2, help_text='Fixed Unit: %', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Oxygen Saturation (via Pulse Oximetry)')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Comment')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='esr21_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Vital signs',
                'verbose_name_plural': 'Vital signs',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VaccinationDetails',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date and Time')),
                ('received_dose', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Has the participant received a vaccination dose?')),
                ('received_dose_before', models.CharField(choices=[('first_dose', 'First Dose'), ('second_dose', 'Second Dose'), ('N/A', 'Not applicable')], default='N/A', max_length=12, verbose_name='If yes, please indicate dose')),
                ('vaccination_site', models.CharField(blank=True, help_text='Geographical location', max_length=30, null=True, verbose_name='Where was the vaccination administered?')),
                ('vaccination_date', models.DateTimeField(blank=True, null=True, verbose_name='Date and time the vaccination was administered?')),
                ('location', models.CharField(choices=[('left_deltoid', 'Left deltoid'), ('right_deltoid', 'Right deltoid'), ('OTHER', 'Other, specify'), ('N/A', 'Not applicable')], default='N/A', max_length=30, verbose_name='Location administered')),
                ('location_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('admin_per_protocol', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=3, verbose_name='Was the vaccine administered per protocol?')),
                ('reason_not_per_protocol', models.CharField(blank=True, max_length=100, null=True, verbose_name='If No, please explain:')),
                ('lot_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Vaccine batch/lot number')),
                ('expiry_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_is_future], verbose_name='Vaccination expiry date')),
                ('provider_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Name of the provider')),
                ('next_vaccination_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_is_future], verbose_name='When is the participant scheduled for their next vaccination dose?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='esr21_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Collection of vaccination details',
                'verbose_name_plural': 'Collection of vaccination details',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TargetedPhysicalExamination',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date and Time')),
                ('physical_exam_performed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=35, verbose_name='Was the physical examination performed?')),
                ('reason_not_done', models.CharField(blank=True, choices=[('not_collected', 'Not collected'), ('not_required', 'Not required at this visit'), ('measurement_skipped', 'Measurement skipped at this visit'), ('subject_refused', 'Subject refused'), ('equipment_malfunction', 'Equipment malfunction'), ('staff_unavailable', 'Staff unavailable'), ('no_further_information', 'No further information'), ('OTHER', 'Other, specify'), ('N/A', 'Not applicable')], max_length=40, null=True, verbose_name='If No, Reason Not Done')),
                ('area_performed', models.CharField(blank=True, max_length=35, null=True, verbose_name='What area was the physical exam preformed?')),
                ('exam_date', models.DateTimeField(blank=True, null=True, validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Date of examination (DD MMM YYYY)')),
                ('abnormalities', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text='Each clinically significant abnormal finding at screening will be recorded in the medical history', max_length=30, verbose_name='Were any abnormalities found?')),
                ('if_abnormalities', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], max_length=3, null=True, verbose_name='If Yes, were any abnormalities clinically significant? ')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='esr21_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Targeted Physical Exam',
                'verbose_name_plural': 'Targeted Physical Exam',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpecialInterestAdverseEvent',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date and Time')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='esr21_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Special Interest Adverse Event',
            },
        ),
        migrations.CreateModel(
            name='SeriousAdverseEvent',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date and Time')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='esr21_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Serious Adverse Event',
            },
        ),
        migrations.CreateModel(
            name='ScreeningEligibility',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, unique=True, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of report.', validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date and Time')),
                ('substance_hypersensitivity', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Any hypersensitivity to the active substance or to any of the excipients?')),
                ('pregnancy_status', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=3, verbose_name='Are you pregnant or nursing or do you plan to get pregnant in the next 3 months?')),
                ('thrombosis_or_thrombocytopenia', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=3, verbose_name='Does individuals have any risk factors for or a reported history of thrombosis and/or thrombocytopenia?')),
                ('clinical_bleeding', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', help_text='(eg, factor deficiency, coagulopathy, or platelet disorder) ', max_length=20, verbose_name='Ever experienced clinically significant bleeding, or prior history of significant bleeding or bruising following intramuscular injections or venepuncture?')),
                ('guillain_barre_syndrome', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=3, verbose_name='Any history of Guillain-Barré syndrome?')),
                ('suspected_immuno_condition', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=3, verbose_name='Any confirmed or suspected immunosuppressive or immunodeficient state (including Asplenia)?')),
                ('comorbidities_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='Other specify')),
                ('symptoms_other', models.TextField(blank=True, null=True, verbose_name='If other specify')),
                ('is_eligible', models.BooleanField(default=False)),
                ('ineligibility', models.TextField(max_length=150, null=True, verbose_name='Reason not eligible')),
                ('comorbidities', models.ManyToManyField(blank=True, to='esr21_subject.Diseases', verbose_name='Comorbidities')),
                ('covid_symptoms', models.ManyToManyField(blank=True, to='esr21_subject.Symptoms', verbose_name='Did the participant experience any symptoms?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'Screening Eligibility',
                'verbose_name_plural': 'Screening Eligibility',
            },
        ),
        migrations.CreateModel(
            name='SampleCollection',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date and Time')),
                ('sample_collected', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Sample collection:')),
                ('date_collected', models.DateField(blank=True, null=True, verbose_name='Sample collection Date:')),
                ('test_type', models.CharField(choices=[('pcr_test', 'PCR Test'), ('nasal_Swab', 'Nasal Swab'), ('OTHER', 'Other, specify')], max_length=20, verbose_name='Test performed')),
                ('test_type_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='Other ,specify')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='esr21_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Sample Collection',
                'verbose_name_plural': 'Sample Collection',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RapidHIVTesting',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date and Time')),
                ('prev_hiv_test', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Have you tested for HIV before?')),
                ('evidence_hiv_status', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], help_text='evidence = clinic and/or IDCC records. check regimes/drugs. ', max_length=15, null=True, verbose_name='(Interviewer) Have you seen evidence of the HIV result?')),
                ('hiv_test_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of HIV Test')),
                ('hiv_result', models.CharField(blank=True, choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('IND', 'Indeterminate')], max_length=15, null=True, verbose_name='What was your result?')),
                ('rapid_test_done', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Was a rapid test processed?')),
                ('rapid_test_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date of rapid test')),
                ('rapid_test_result', models.CharField(blank=True, choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('IND', 'Indeterminate')], max_length=15, null=True, verbose_name='What is the rapid test result?')),
                ('comments', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='esr21_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Rapid HIV Testing',
                'verbose_name_plural': 'Rapid HIV Testing',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PregnancyTest',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date and Time')),
                ('preg_performed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=20, verbose_name='Was the pregnancy test performed?')),
                ('preg_test_type', models.CharField(blank=True, choices=[('urine_serum', 'Urine/Serum'), ('hgg', 'HCG')], max_length=30, null=True, verbose_name='Type of pregnancy test performed')),
                ('preg_date', models.DateTimeField(blank=True, help_text=' (DD MMM YYYY)', null=True, validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Date of pregnancy test')),
                ('result', models.CharField(blank=True, choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('IND', 'Indeterminate')], max_length=20, null=True, verbose_name='Result')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='esr21_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Pregnancy Test',
                'verbose_name_plural': 'Pregnancy Test',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PregnancyStatus',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date and Time')),
                ('start_date_menstrual_period', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Start Date of Last Menstrual Period (DD/MMM/YYYY)')),
                ('expected_delivery', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_is_future], verbose_name='Date of Expected Delivery (DD/MMM/YYYY)')),
                ('contraceptive_usage', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Using Contraception')),
                ('contraceptive_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('surgically_sterilized', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the participant considered to be surgically sterilized?')),
                ('amenorrhea_history', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Including bilateral tubal ligation, bilateral oophorectomy,or hysterectomy', max_length=3, verbose_name='Does the participant have a history of >= 12 months amenorrhea prior to randomization, without an alternative cause, following cessation of exogenous sex-hormonal treatment?')),
                ('post_menopausal_range', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Until follicle-stimulating hormone is documented to be within menopausal range, the participant is to be considered of childbearing potential.', max_length=12, verbose_name='Does the participant have a follicle-stimulating hormone level in the post-menopausal range?')),
                ('post_menopausal', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('OTHER', 'Other')], max_length=10, verbose_name='Is the woman considered to be post-menopausal?')),
                ('post_menopausal_other', models.TextField(blank=True, max_length=150, null=True, verbose_name='If other, specify')),
                ('comment', models.TextField(blank=True, max_length=200, null=True, verbose_name='Comment')),
                ('child_bearing_potential', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3)),
                ('number_prev_pregnancies', models.PositiveIntegerField(blank=True, null=True, verbose_name='Overall number of previous pregnancies')),
                ('number_normal_pregnancies', models.PositiveIntegerField(blank=True, null=True, verbose_name='Number of normal deliveries')),
                ('number_miscarriages', models.PositiveIntegerField(blank=True, null=True, verbose_name='Number of spontaneous miscarriages')),
                ('date_miscarriages', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of last spontaneous miscarriage')),
                ('risk_factor', models.CharField(blank=True, max_length=10, null=True, verbose_name='Relevant pregnancy risk factor')),
                ('contraceptive', models.ManyToManyField(blank=True, max_length=30, to='esr21_subject.Contraception', verbose_name='If yes, specify contraception')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='esr21_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Pregnancy Status',
                'verbose_name_plural': 'Pregnancy Status',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PhysicalExam',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date and Time')),
                ('physical_exam', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, verbose_name='Was the physical examination performed?')),
                ('reason_not_done', models.CharField(choices=[('not_collected', 'Not collected'), ('not_required', 'Not required at this visit'), ('measurement_skipped', 'Measurement skipped at this visit'), ('subject_refused', 'Subject refused'), ('equipment_malfunction', 'Equipment malfunction'), ('staff_unavailable', 'Staff unavailable'), ('no_information', 'No further information'), ('N/A', 'Not applicable')], default='N/A', max_length=30, verbose_name='If No, Reason Not Done')),
                ('exam_date', models.DateField(blank=True, null=True, verbose_name='Date of examination (DD/MMM/YYYY)')),
                ('abnormalities_found', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Each clinically significant abnormal finding at screening will be recorded in the medical history', max_length=10, verbose_name='Were any abnormalities discovered?')),
                ('abn_specify', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If yes, specify')),
                ('clinically_significant', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True, verbose_name='If yes, were any abnormalities considered to be clinically significant?')),
                ('participant_weight', models.DecimalField(decimal_places=2, help_text='Weight in kilograms (KG)', max_digits=5, validators=[django.core.validators.MinValueValidator(0, message='Cannot be a negative number'), django.core.validators.MaxValueValidator(500)], verbose_name='Participant Weight')),
                ('participant_height', models.DecimalField(decimal_places=2, help_text='Height in meters (M)', max_digits=5, validators=[django.core.validators.MinValueValidator(0, message='Cannot be a negative number'), django.core.validators.MaxValueValidator(4)], verbose_name='Participant Height')),
                ('general_appearance', models.CharField(choices=[('normal', 'Normal'), ('abnormal', 'Abnormal')], max_length=20, verbose_name='General Appearance')),
                ('abnormality_description', models.TextField(blank=True, null=True, verbose_name='Abnormal, description of abnormality')),
                ('face_check', models.CharField(choices=[('normal', 'Normal'), ('abnormal', 'Abnormal')], max_length=20, verbose_name='Head, eyes, ears, and nose')),
                ('face_description', models.TextField(blank=True, null=True, verbose_name='Abnormal, description of abnormality')),
                ('neck_check', models.CharField(choices=[('normal', 'Normal'), ('abnormal', 'Abnormal')], max_length=20, verbose_name='Neck')),
                ('neck_description', models.TextField(blank=True, null=True, verbose_name='Abnormal, description of abnormality')),
                ('respiratory_check', models.CharField(choices=[('normal', 'Normal'), ('abnormal', 'Abnormal')], max_length=20, verbose_name='Respiratory')),
                ('respiratory_description', models.TextField(blank=True, null=True, verbose_name='Abnormal, description of abnormality')),
                ('cardiovascular_check', models.CharField(choices=[('normal', 'Normal'), ('abnormal', 'Abnormal')], max_length=20, verbose_name='Cardiovascular')),
                ('cardiovascular_description', models.TextField(blank=True, null=True, verbose_name='Abnormal, description of abnormality')),
                ('abdominal_check', models.CharField(choices=[('normal', 'Normal'), ('abnormal', 'Abnormal')], max_length=20, verbose_name='Abdominal')),
                ('abdominal_description', models.TextField(blank=True, null=True, verbose_name='Abnormal, description of abnormality')),
                ('skin_check', models.CharField(choices=[('normal', 'Normal'), ('abnormal', 'Abnormal')], max_length=20, verbose_name='Skin')),
                ('skin_description', models.TextField(blank=True, null=True, verbose_name='Abnormal, description of abnormality')),
                ('neurological_check', models.CharField(choices=[('normal', 'Normal'), ('abnormal', 'Abnormal')], max_length=20, verbose_name='Neurological')),
                ('neurological_description', models.TextField(blank=True, null=True, verbose_name='Abnormal, description of abnormality')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='esr21_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Physical examination',
                'verbose_name_plural': 'Physical examination',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PersonalContactInfo',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, unique=True, verbose_name='Subject Identifier')),
                ('action_identifier', models.CharField(max_length=25, null=True)),
                ('tracking_identifier', models.CharField(max_length=30, null=True)),
                ('related_tracking_identifier', models.CharField(max_length=30, null=True)),
                ('parent_tracking_identifier', models.CharField(max_length=30, null=True)),
                ('may_sms', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, null=True, verbose_name='Has the participant given permission <b>to be contacted by SMS</b> by study staff for follow-up purposes during the study?')),
                ('mail_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Mailing address ')),
                ('physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Physical address with detailed description')),
                ('subject_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone')),
                ('subject_phone_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone (alternate)')),
                ('may_contact_indirectly', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='For example a partner, spouse, family member, neighbour ...', max_length=25, verbose_name='Has the participant given permission for study staff <b>to contact anyone else</b> for follow-up purposes during the study?')),
                ('indirect_contact_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full names of the contact person')),
                ('indirect_contact_relation', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant')),
                ('indirect_contact_physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Full physical address ')),
                ('indirect_contact_cell_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternative)')),
                ('indirect_contact_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone number')),
                ('subject_work_place', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Name and location of work place')),
                ('subject_work_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Work contact telephone')),
                ('subject_work_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Work contact cell number')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future])),
                ('date_signed', models.DateField(default=edc_base.utils.get_utcnow, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date Locator form signed')),
                ('may_visit_home', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given their permission for study staff <b>to make home visits</b> for follow-up purposes during the study?')),
                ('may_call', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], max_length=25, verbose_name='Has the participant given their permission for study staff to call them for follow-up purposes during the study?')),
                ('subject_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Mobile phone number')),
                ('subject_cell_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Mobile phone number (alternate)')),
                ('may_call_work', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Doesnt_work', "Doesn't work")], max_length=25, verbose_name='Has the participant given their permission for study staff to contact them at work for follow up purposes during the study?')),
                ('indirect_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Mobile phone number')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='site_name', to='sites.site')),
            ],
            options={
                'verbose_name': 'Personal Contact Information',
                'verbose_name_plural': 'Personal Contact Information',
            },
        ),
        migrations.CreateModel(
            name='OnSchedule',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(editable=False)),
                ('onschedule_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future])),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('schedule_name', models.CharField(blank=True, max_length=25, null=True)),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('onsite', edc_base.sites.managers.CurrentSiteManager()),
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='MedicalHistory',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date and Time')),
                ('pregnancy_status', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=3, null=True, verbose_name='Are you pregnant or nursing or do you plan to get pregnant in the next 3 months?')),
                ('thrombosis_or_thrombocytopenia', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=3, verbose_name='Does individuals have any risk factors for or a reported history of thrombosis and/or thrombocytopenia?')),
                ('clinical_bleeding', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', help_text='(eg, factor deficiency, coagulopathy, or platelet disorder) ', max_length=20, verbose_name='Ever experienced clinically significant bleeding, or prior history of significant bleeding or bruising following intramuscular injections or venepuncture?')),
                ('guillain_barre_syndrome', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=3, verbose_name='Any history of Guillain-Barré syndrome?')),
                ('suspected_immuno_condition', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=3, verbose_name='Any confirmed or suspected immunosuppressive or immunodeficient state (including Asplenia)?')),
                ('relevant_history', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the subject have any relevant Medical History?')),
                ('prior_covid_infection', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Has the participant had a prior infection of SARS-CoV-2/COVID 19?')),
                ('symptoms_other', models.TextField(blank=True, null=True, verbose_name='If other specify')),
                ('smoking_status', models.CharField(choices=[('never_smoked', 'Never Smoked'), ('previous_smoker', 'Previous Smoker'), ('occasional_smoker', 'Occasional Smoker'), ('current_smoking', 'Current Smoker')], max_length=20, verbose_name='Smoking status/history')),
                ('alcohol_status', models.CharField(choices=[('never_drunk_alcohol', 'Never drunk alcohol'), ('previously_drunk_alcohol', 'Previously drunk alcohol'), ('occasionally_drinks_alcohol', 'Occasionally drinks alcohol'), ('currently_drinks_alcohol', 'Currently drinks alcohol')], max_length=50, verbose_name='Alcohol Use')),
                ('diabetes', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Has the participant been diagnosed with diabetes mellitus?')),
                ('comorbidities_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='Other specify')),
                ('no_of_mass_gathering', models.PositiveIntegerField(default=0, help_text='eg, weddings, funerals; defined as 50 or more people', verbose_name='How many mass gatherings has the participant attended in the preceding 12 weeks? ')),
                ('no_internal_trips', models.PositiveIntegerField(default=0, verbose_name='How many COVID-19 inter-zonal trips has the participant made in Botswana in the past 12 weeks? ')),
                ('mode_of_transport', models.CharField(choices=[('public_transport', 'Public Transport'), ('private_transport', 'Private Transport')], max_length=30, verbose_name='Mode of Transport')),
                ('using_shared_kitchen', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the participant using a shared kitchen/dining at work?')),
                ('comorbidities', models.ManyToManyField(to='esr21_subject.Diseases', verbose_name='Comorbidities')),
                ('covid_symptoms', models.ManyToManyField(blank=True, to='esr21_subject.Symptoms', verbose_name='If yes, did the participant experience any symptoms?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='esr21_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Medical History',
                'verbose_name_plural': 'Medical History',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Hospitalisation',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date and Time')),
                ('status', models.CharField(choices=[('er', 'ER'), ('regular_ward', 'Regular Ward'), ('icu_hdu', 'ICU/HDU')], max_length=50, verbose_name='Hospitalisation Status')),
                ('start_date', models.DateField(verbose_name='Start date of hospitalisation')),
                ('stop_date', models.DateField(blank=True, null=True, verbose_name='Stop date of hospitalisation')),
                ('ongoing', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3)),
                ('reason', models.CharField(choices=[('covid19_related_symptoms', 'COVID-19 related symptoms'), ('OTHER', 'Other')], max_length=50, verbose_name='Primary reason for hospital/ inpatient/ ER visit')),
                ('reason_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=100, null=True, verbose_name='If Other, specify')),
                ('hospitalisation_outcome', models.CharField(blank=True, choices=[('expired', 'Expired'), ('hospice_care', 'Home: Hospice Care'), ('self_care', 'Home: Self Care'), ('hospice_medical_facility', 'Hospice Medical Facility'), ('inpatient_rehabilitation', 'Inpatient Rehabilitation'), ('intermediate_care_facility', 'Intermediate Care Facility'), ('medical_advice', 'Left Against Medical Advice'), ('long_term_care_hospital', 'Long Term Care Hospital'), ('nursing_facility', 'Nursing Facility'), ('unit_ward_change', 'Unit/Ward Change')], max_length=90, null=True, verbose_name='Hospitalisation Outcome')),
                ('covid_symptoms', models.ManyToManyField(blank=True, to='esr21_subject.COVIDSymptoms', verbose_name='If COVID-19 related symptoms, please check all that apply')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='esr21_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Hospitalisation',
                'verbose_name_plural': 'Hospitalisation',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectVisit',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(editable=False, max_length=25)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('visit_code_sequence', models.IntegerField(blank=True, default=0, help_text='An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)', null=True, verbose_name='Sequence')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of this report', validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Visit Date and Time')),
                ('reason_unscheduled_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If "Other" reason for unscheduled visit, specify')),
                ('reason_missed_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If "Other" reason for missed visit, specify')),
                ('study_status', models.CharField(max_length=50, null=True, verbose_name="What is the participant's current study status")),
                ('require_crfs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name='Are scheduled data being submitted with this visit?')),
                ('info_source_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If "Other" source of information, specify')),
                ('survival_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Deceased'), ('unknown', 'Unknown')], default='alive', max_length=10, null=True, verbose_name="Participant's survival status")),
                ('last_alive_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date participant last known alive')),
                ('comments', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment if any additional pertinent information about the participant')),
                ('reason', models.CharField(choices=[('scheduled', 'Scheduled visit/contact'), ('missed', 'Did not attend scheduled visit'), ('unscheduled', 'Unscheduled visit/contact'), ('lost', 'Use only when withdrawing subject off study'), ('completed protocol', 'Subject has completed the study')], max_length=25, verbose_name='What is the reason for this visit report?')),
                ('reason_missed', models.CharField(blank=True, max_length=250, null=True, verbose_name="If 'Did not attend scheduled visit' is detailed above, reason visit was not attended.")),
                ('reason_unscheduled', models.CharField(blank=True, max_length=25, null=True, verbose_name="If 'Unscheduled' above, provide reason for the unscheduled visit")),
                ('info_source', models.CharField(choices=[('clinic_visit_w_subject', 'Clinic visit with participant'), ('other_contact_w_subject', 'Other contact with participant (i.e telephone call)'), ('contact_w_health_worker', 'Contact with health care worker'), ('Contact_w_family_design', 'Contact with family or designated person who can provide information'), ('OTHER', 'Other,specify')], max_length=40, verbose_name='What is the main source of this information?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('appointment', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edc_appointment.appointment')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Subject Visit',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSubjectRequisition',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('requisition_identifier', models.CharField(db_index=True, max_length=50, verbose_name='Requisition Id')),
                ('identifier_prefix', models.CharField(db_index=True, editable=False, max_length=50, null=True)),
                ('primary_aliquot_identifier', models.CharField(db_index=True, editable=False, max_length=18, null=True)),
                ('clinic_verified', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, null=True)),
                ('clinic_verified_datetime', models.DateTimeField(null=True)),
                ('is_drawn', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If No, provide a reason below', max_length=3, verbose_name='Was a specimen drawn?')),
                ('reason_not_drawn_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('protocol_number', models.CharField(editable=False, max_length=10, null=True)),
                ('clinician_initials', edc_base.model_fields.custom_fields.InitialsField(blank=True, help_text='Type 2-3 letters, all in uppercase and no spaces', max_length=3, null=True, verbose_name='Initials')),
                ('specimen_type', models.CharField(blank=True, max_length=25, null=True, verbose_name='Specimen type')),
                ('received', models.BooleanField(default=False)),
                ('received_datetime', models.DateTimeField(blank=True, null=True)),
                ('processed', models.BooleanField(default=False)),
                ('processed_datetime', models.DateTimeField(blank=True, null=True)),
                ('packed', models.BooleanField(default=False)),
                ('packed_datetime', models.DateTimeField(blank=True, null=True)),
                ('shipped', models.BooleanField(default=False)),
                ('shipped_datetime', models.DateTimeField(blank=True, null=True)),
                ('sample_id', models.CharField(max_length=50, verbose_name='LIS generated Sample Identifier')),
                ('requisition_datetime', models.DateTimeField(default=django.utils.timezone.now, validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Requisition Date and Time')),
                ('study_site', models.CharField(choices=[('greater_francistown', 'Greater Francistown'), ('greater_gaborone', 'Greater Gaborone'), ('ngami', 'Ngami'), ('greater_selibe_phikwe', 'Greater Selibe Phikwe'), ('serowe_or_palapye', 'Serowe/Palapye')], max_length=25, verbose_name='Study site')),
                ('item_count', models.PositiveIntegerField(blank=True, help_text='Number of tubes, samples, etc being sent for this test/order only. Determines number of labels to print', null=True, verbose_name='Total number of items')),
                ('estimated_volume', models.DecimalField(blank=True, decimal_places=2, help_text='If applicable, estimated volume of sample for this test/order. This is the total volume if number of "tubes" above is greater than 1', max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0, message='Cannot be a negative number')], verbose_name='Estimated volume in mL')),
                ('item_type', models.CharField(choices=[('N/A', 'Not applicable'), ('tube', 'Tube'), ('swab', 'Swab'), ('OTHER', 'Other')], default='N/A', max_length=25, verbose_name='Item collection type')),
                ('item_type_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('priority', models.CharField(choices=[('normal', 'Normal'), ('urgent', 'Urgent')], default='normal', max_length=25, verbose_name='Priority')),
                ('reason_not_drawn', models.CharField(choices=[('not_collected', 'Not collected'), ('not_required', 'Not required at this visit'), ('measurement_skipped', 'Measurement skipped at this visit'), ('subject_refused', 'Subject refused'), ('equipment_malfunction', 'Equipment malfunction'), ('staff_unavailable', 'Staff unavailable'), ('no_further_information', 'No further information'), ('OTHER', 'Other, specify'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='If not drawn, please explain')),
                ('drawn_datetime', models.DateTimeField(blank=True, help_text='If not drawn, leave blank.', null=True, validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Date / Time Specimen Drawn')),
                ('urgent_specify', models.TextField(blank=True, max_length=250, null=True, verbose_name='If urgent, please specify')),
                ('comments', models.TextField(blank=True, max_length=350, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('panel', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edc_lab.panel')),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
                ('subject_visit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='esr21_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'historical subject requisition',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSpecialInterestAdverseEventRecord',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('aesi_name', models.CharField(max_length=100, verbose_name='Name of the AESI')),
                ('meddra_pname', models.CharField(blank=True, max_length=100, null=True, verbose_name='MedDRA Preferred Name of the AESI')),
                ('meddra_pcode', models.CharField(blank=True, max_length=50, null=True, verbose_name='MedDRA Preferred Code of the AESI')),
                ('meddra_version', models.PositiveIntegerField(verbose_name='MedDRA version')),
                ('start_date', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name='AESI start date')),
                ('end_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='AESI end date')),
                ('date_aware_of', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date investigator became aware of AESI')),
                ('aesi_category', models.CharField(choices=[('generalized_convulsion', 'Generalized convulsion'), ('guillain_barre_syndrome', 'Guillain-Barre syndrome'), ('acute_disseminated', 'Acute disseminated encephalomyelitis'), ('other_neuro_events', 'Other neurologic events'), ('thrombotic', 'Thrombotic or thromboembolic or neurovascular events'), ('Thrombocytopenia', 'Thrombocytopenia'), ('vasculitides', 'Vasculitides'), ('anaphylaxis', 'Anaphylaxis'), ('vaccine_assoc_resp_disease', 'Vaccine-associated enhanced respiratory disease'), ('immune_mediated_cond', 'Potential immune-mediated conditions')], max_length=50, verbose_name='AESI category')),
                ('rationale', models.CharField(max_length=100, verbose_name="Investigator's rationale for Study Treatment being related to the events")),
                ('describe_aesi_treatmnt', models.TextField(max_length=200, verbose_name='Describe treatment for event including medications')),
                ('additional_info', models.TextField(max_length=200, verbose_name='Additional information (Symptoms, course, results, diagnostic and other comments)')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
                ('special_interest_adverse_event', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='esr21_subject.specialinterestadverseevent')),
            ],
            options={
                'verbose_name': 'historical Adverse Event of Special Interest',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSeriousAdverseEventRecord',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('sae_details', models.TextField(verbose_name='Details of the SAE')),
                ('sae_name', models.CharField(max_length=100, verbose_name='Name of the SAE')),
                ('meddra_pname', models.CharField(blank=True, max_length=100, null=True, verbose_name='MedDRA Preferred Name of the SAE')),
                ('meddra_pcode', models.CharField(blank=True, max_length=50, null=True, verbose_name='MedDRA Preferred Code OF the SAE')),
                ('meddra_version', models.PositiveIntegerField(verbose_name='MedDRA version')),
                ('sae_intensity', models.CharField(choices=[('mild', 'Mild'), ('moderate', 'Moderate'), ('severe', 'Severe')], max_length=10, verbose_name='Intensity of the SAE')),
                ('start_date', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name='SAE start date')),
                ('resolution_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='SAE end date')),
                ('date_aware_of', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date investigator became aware of SAE')),
                ('admission_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='If hospitalized, Date of Admission')),
                ('discharge_date', models.DateField(blank=True, null=True, verbose_name='If hospitalized, Date of Discharge')),
                ('incapacity_specify', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=100, null=True, verbose_name='Specify persistent or significant disability/incapacity')),
                ('medical_event_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=100, null=True, verbose_name='If, Other important medical event, specify')),
                ('rationale', models.CharField(max_length=100, verbose_name="Investigator's rationale for Study Treatment being Related to the events")),
                ('describe_sae_treatmnt', models.TextField(max_length=200, verbose_name='Describe treatment for event including medications')),
                ('test_performed', models.TextField(max_length=200, verbose_name='List all diagnostic tests that were performed to confirm event')),
                ('additional_info', models.TextField(max_length=200, verbose_name='Additional information (for example: history of presenting illness, course of illness, complications, risk factors and/or other contributing factors)')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('serious_adverse_event', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='esr21_subject.seriousadverseevent')),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Serious Adverse Event Record',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalScreeningEligibility',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(db_index=True, max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of report.', validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date and Time')),
                ('substance_hypersensitivity', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Any hypersensitivity to the active substance or to any of the excipients?')),
                ('pregnancy_status', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=3, verbose_name='Are you pregnant or nursing or do you plan to get pregnant in the next 3 months?')),
                ('thrombosis_or_thrombocytopenia', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=3, verbose_name='Does individuals have any risk factors for or a reported history of thrombosis and/or thrombocytopenia?')),
                ('clinical_bleeding', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', help_text='(eg, factor deficiency, coagulopathy, or platelet disorder) ', max_length=20, verbose_name='Ever experienced clinically significant bleeding, or prior history of significant bleeding or bruising following intramuscular injections or venepuncture?')),
                ('guillain_barre_syndrome', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=3, verbose_name='Any history of Guillain-Barré syndrome?')),
                ('suspected_immuno_condition', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=3, verbose_name='Any confirmed or suspected immunosuppressive or immunodeficient state (including Asplenia)?')),
                ('comorbidities_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='Other specify')),
                ('symptoms_other', models.TextField(blank=True, null=True, verbose_name='If other specify')),
                ('is_eligible', models.BooleanField(default=False)),
                ('ineligibility', models.TextField(max_length=150, null=True, verbose_name='Reason not eligible')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Screening Eligibility',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalOnScheduleIll',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(editable=False)),
                ('onschedule_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future])),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('schedule_name', models.CharField(blank=True, max_length=25, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical on schedule ill',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalOnSchedule',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(editable=False)),
                ('onschedule_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future])),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('schedule_name', models.CharField(blank=True, max_length=25, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical on schedule',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalOffScheduleIll',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(db_index=True, max_length=50, verbose_name='Subject Identifier')),
                ('report_datetime', models.DateTimeField(editable=False)),
                ('offschedule_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Date and time subject taken off schedule')),
                ('schedule_name', models.CharField(blank=True, max_length=25, null=True)),
                ('consent_version', models.CharField(blank=True, max_length=2, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical off schedule ill',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalOffSchedule',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(db_index=True, max_length=50, verbose_name='Subject Identifier')),
                ('report_datetime', models.DateTimeField(editable=False)),
                ('offschedule_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Date and time subject taken off schedule')),
                ('schedule_name', models.CharField(blank=True, max_length=25, null=True)),
                ('consent_version', models.CharField(blank=True, max_length=2, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical off schedule',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMedicalDiagnosis',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('start_date', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name='Start Date (DD/MMM/YYYY)')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date (DD/MMM/YYYY)')),
                ('ongoing', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Ongoing')),
                ('condition_related_meds', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Is the subject taking medication related to this condition?')),
                ('rel_conc_meds', models.TextField(max_length=150, verbose_name='Related concomitant medications')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('medical_history', models.ForeignKey(blank=True, db_constraint=False, max_length=25, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='esr21_subject.medicalhistory', verbose_name='Medical History Diagnosis')),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Medical Diagnosis',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalInformedConsent',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('identity', django_crypto_fields.fields.identity_field.IdentityField(help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Identity number')),
                ('confirm_identity', django_crypto_fields.fields.identity_field.IdentityField(help_text='Retype the identity number (Encryption: RSA local)', max_length=71, null=True)),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name')),
                ('dob', models.DateField(null=True, verbose_name='Date of birth')),
                ('is_dob_estimated', edc_base.model_fields.date_estimated.IsDateEstimatedField(choices=[('-', 'No'), ('D', 'Yes, estimated the Day'), ('MD', 'Yes, estimated Month and Day'), ('YMD', 'Yes, estimated Year, Month and Day')], help_text='If the exact date is not known, please indicate which part of the date is estimated.', max_length=25, null=True, verbose_name='Is date of birth estimated?')),
                ('guardian_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if participant is a minor.<BR>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Guardian's last and first name")),
                ('subject_type', models.CharField(max_length=25)),
                ('is_incarcerated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="( if 'Yes' STOP participant cannot be consented )", max_length=3, null=True, validators=[edc_consent.validators.eligible_if_no], verbose_name='Is the participant under involuntary incarceration?')),
                ('is_literate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'No' provide witness's name on this form and signature on the paper document.", max_length=3, verbose_name='Is the participant literate?')),
                ('witness_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if participant is illiterate.<br>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Witness's last and first name")),
                ('language', models.CharField(choices=[('tn', 'Setswana'), ('en', 'English')], help_text='The language used for the consent process will also be used during data collection.', max_length=25, verbose_name='Language of consent')),
                ('is_verified', models.BooleanField(default=False, editable=False)),
                ('is_verified_datetime', models.DateTimeField(editable=False, null=True)),
                ('verified_by', models.CharField(editable=False, max_length=25, null=True)),
                ('report_datetime', models.DateTimeField(editable=False, null=True)),
                ('version', models.CharField(editable=False, help_text="See 'Consent Type' for consent versions by period.", max_length=10, verbose_name='Consent version')),
                ('updates_versions', models.BooleanField(default=False)),
                ('sid', models.CharField(blank=True, editable=False, help_text='Used for randomization against a prepared rando-list.', max_length=15, null=True, verbose_name='SID')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('dm_comment', models.CharField(editable=False, help_text='see also edc.data manager.', max_length=150, null=True, verbose_name='Data Management comment')),
                ('consent_identifier', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this consent instance')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text='Ensure initials consist of letters only in upper case, no spaces. (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('screening_identifier', models.CharField(max_length=50, verbose_name='Screening identifier')),
                ('consent_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of consent.', verbose_name='Consent date and time')),
                ('identity_type', models.CharField(choices=[('national_identity_card', 'National Identity Card'), ('national_identity_card_rcpt', 'National Identity Card Receipt'), ('passport', 'Passport'), ('OTHER', 'Other')], max_length=30, verbose_name='What type of identity number is this?')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('OTHER', 'Other')], max_length=5, null=True, verbose_name='Gender')),
                ('hiv_testing_consent', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Participant is not eligible if no', max_length=3, validators=[edc_consent.validators.eligible_if_yes], verbose_name='Do you consent to having HIV testing?')),
                ('optional_sample_collection', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Do you consent to optional sample collection?')),
                ('consent_to_participate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Participant is not eligible if no', max_length=3, validators=[edc_consent.validators.eligible_if_yes], verbose_name='Do you consent to participate in the study?')),
                ('gender_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Informed Consent',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalEligibilityConfirmation',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('screening_identifier', models.CharField(db_index=True, editable=False, max_length=36, verbose_name='Eligibility Identifier')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of report.', validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date and Time')),
                ('any_vaccine_receipt', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='For study participants who become hospitalised with COVID-19, receipt of licensed treatment options and/or participation in investigational treatment studies is permitted.', max_length=3, verbose_name='Any receipt of, or planned receipt of any vaccines, medications, or investigational products indicated for the prevention of SARS-CoV-2 infection or treatment of COVID-19?')),
                ('participating_in_other_studies', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=3, verbose_name='Is the participant participating in other studies?')),
                ('age_in_years', models.PositiveIntegerField(help_text='(Years)', verbose_name='What is the participants age?')),
                ('received_vaccines', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If Yes, participant is not eligible', max_length=10, verbose_name='Has the participant received any vaccine other than licensed influenza vaccines within 30 days prior to and after administration of study intervention?')),
                ('ineligibility', models.TextField(editable=False, max_length=150, null=True, verbose_name='Reason not eligible')),
                ('is_eligible', models.BooleanField(default=False, editable=False)),
                ('is_consented', models.BooleanField(default=False, editable=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Eligibility Confirmation',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAdverseEventRecord',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('ae_name', models.CharField(max_length=100, verbose_name='Name of the Adverse Event')),
                ('event_details', models.TextField(blank=True, null=True, verbose_name='Details of the Adverse Event')),
                ('meddra_pname', models.CharField(blank=True, max_length=100, null=True, verbose_name='MedDRA Preferred Name of the Adverse Event')),
                ('meddra_pcode', models.CharField(blank=True, max_length=50, null=True, verbose_name='MedDRA Preferred Code of the Adverse Event')),
                ('meddra_version', models.PositiveIntegerField(blank=True, null=True, verbose_name='MedDRA version')),
                ('start_date', models.DateField(validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Adverse Event start date')),
                ('stop_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Adverse Event stop date')),
                ('substance_hypersensitivity', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Any hypersensitivity to the active substance or to any of the excipients?')),
                ('status', models.CharField(choices=[('resolved', 'Resolved'), ('ongoing', 'Ongoing'), ('death', 'Death')], max_length=10, verbose_name='Status of the Adverse Event')),
                ('ae_grade', models.CharField(choices=[('mild', 'Mild (Grade 1)'), ('moderate', 'Moderate (Grade 2)'), ('severe', 'Severe (Grade 3)'), ('life_threatening', 'Life-threatening (Grade 4)'), ('fatal', 'Fatal (Grade 5)')], max_length=30, verbose_name='Common Terminology Criteria for Adverse Events (CTCAE) grading')),
                ('study_treatmnt_rel', models.CharField(choices=[('related', 'Related'), ('not_related', 'Not Related')], max_length=15, verbose_name='Relationship to study treatment')),
                ('nonstudy_treatmnt_rel', models.CharField(choices=[('related', 'Related'), ('not_related', 'Not Related')], max_length=15, verbose_name='Relationship to non-study treatment')),
                ('studyproc_treatmnt_rel', models.CharField(choices=[('related', 'Related'), ('not_related', 'Not Related'), ('N/A', 'Not Applicable')], max_length=15, verbose_name='Relationship to study procedure')),
                ('action_taken', models.CharField(choices=[('dose_not_changed', 'Dose not changed'), ('drug_withdrawal', 'Drug withdrawal'), ('N/A', 'N/A'), ('unknown', 'unknown')], max_length=25, verbose_name='Action taken with study treatment')),
                ('outcome', models.CharField(blank=True, choices=[('not_resolved', 'Not recovered/ not resolved'), ('resolved', 'Recovered / resolved'), ('resolved_with_sequelae', 'Recovered / resolved with sequelae'), ('resolving', 'Recovering / resolving'), ('fatal', 'Fatal / Death'), ('unknown', 'unknown')], max_length=50, null=True, verbose_name='Outcome')),
                ('sequelae_specify', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=100, null=True, verbose_name='If Recovered / resolved with sequelae, please specify sequelae')),
                ('serious_event', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Was this considered to be a Serious Adverse Event?')),
                ('special_interest_ae', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='(If Yes, check all serious criteria that apply on the corresponding SAE form.)', max_length=3, verbose_name='Was the event an AE of Special Interest?')),
                ('medically_attended_ae', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Was the event a Medically attended AE?')),
                ('maae_specify', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=100, null=True, verbose_name='If MAAE, specify')),
                ('treatment_given', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Was treatment given?')),
                ('treatmnt_given_specify', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If yes, specify details')),
                ('ae_study_discontinued', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Did the AE cause the subject to discontinue from the study?')),
                ('discontn_dt', models.DateField(blank=True, null=True, verbose_name='Date of discontinuation')),
                ('covid_related_ae', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is this a COVID-19 related AE?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('adverse_event', models.ForeignKey(blank=True, db_constraint=False, max_length=25, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='esr21_subject.adverseevent')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Adverse Event Record',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='EligibilityConfirmation',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('screening_identifier', models.CharField(editable=False, max_length=36, unique=True, verbose_name='Eligibility Identifier')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of report.', validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date and Time')),
                ('any_vaccine_receipt', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='For study participants who become hospitalised with COVID-19, receipt of licensed treatment options and/or participation in investigational treatment studies is permitted.', max_length=3, verbose_name='Any receipt of, or planned receipt of any vaccines, medications, or investigational products indicated for the prevention of SARS-CoV-2 infection or treatment of COVID-19?')),
                ('participating_in_other_studies', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=3, verbose_name='Is the participant participating in other studies?')),
                ('age_in_years', models.PositiveIntegerField(help_text='(Years)', verbose_name='What is the participants age?')),
                ('received_vaccines', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If Yes, participant is not eligible', max_length=10, verbose_name='Has the participant received any vaccine other than licensed influenza vaccines within 30 days prior to and after administration of study intervention?')),
                ('ineligibility', models.TextField(editable=False, max_length=150, null=True, verbose_name='Reason not eligible')),
                ('is_eligible', models.BooleanField(default=False, editable=False)),
                ('is_consented', models.BooleanField(default=False, editable=False)),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'Eligibility Confirmation',
                'verbose_name_plural': 'Eligibility Confirmation',
            },
        ),
        migrations.CreateModel(
            name='DemographicsData',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date and Time')),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('ethnicity', models.CharField(choices=[('Black African', 'Black African'), ('Caucasian', 'Caucasian'), ('Asian', 'Asian'), ('OTHER', 'Other, specify')], max_length=25, verbose_name='Ethnicity ')),
                ('ethnicity_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other specify...')),
                ('household_members', models.PositiveSmallIntegerField(verbose_name='How many household members live in the participants primary home')),
                ('highest_education', models.CharField(choices=[('None', 'None'), ('Primary', 'Primary'), ('Junior Secondary', 'Junior Secondary'), ('Senior Secondary', 'Senior Secondary'), ('Tertiary', 'Tertiary')], max_length=30, verbose_name='Highest education level')),
                ('employment_status', models.CharField(choices=[('formal-wage_employment_part_time', 'Formal wage employment (Part-time)'), ('formal_wage_employment-full_time)', 'Formal wage employment (full-time)'), ('self_employed_full_time)', 'Self-employed (full time)'), ('self_employed_part_time)', 'Self-employed (part time)'), ('adhoc_work', 'Ad-hoc work'), ('Seasonal_employment', 'Seasonal employment'), ('OTHER', 'Other (specify)')], max_length=33, verbose_name='Employment Status')),
                ('employment_status_other', models.CharField(blank=True, max_length=33, null=True, verbose_name='Other, specify')),
                ('settlement_type', models.CharField(choices=[('urban', 'Urban'), ('rural', 'Rural')], max_length=30, verbose_name='Settlement Type?')),
                ('marital_status', models.CharField(choices=[('Single', 'Single'), ('Married', 'Married'), ('Cohabiting', 'Cohabiting'), ('Widowed', 'Widowed'), ('Divorced', 'Divorced'), ('OTHER', 'Other, specify')], max_length=30, verbose_name='Current marital status?')),
                ('marital_status_other', models.CharField(blank=True, max_length=30, null=True, verbose_name='Other, specify')),
                ('running_water', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=30, verbose_name='Is there running water in domicile?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='esr21_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Demographic Data',
                'verbose_name_plural': 'Demographic Data',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Covid19SymptomaticInfections',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date and Time')),
                ('symptomatic_experiences', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=20, verbose_name='Has the participant experienced any symptomatic infection(s)?')),
                ('date_of_infection', models.DateField(blank=True, null=True, verbose_name='Date of symptomatic infection (DD MMM YYYY):')),
                ('infection_status', models.CharField(choices=[('seronegative', 'Seronegative'), ('seropositive', 'Seropositive')], max_length=20, verbose_name='Previous SARS coV-2 infection status?')),
                ('visits', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=20, verbose_name='Any hospital/ inpatient/ emergency room visit?')),
                ('hospitalisation_date', models.DateField(blank=True, null=True, verbose_name='Date of hospitalisation:')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='esr21_subject.subjectvisit')),
                ('symptomatic_infections', models.ManyToManyField(blank=True, to='esr21_subject.SymptomaticInfections', verbose_name='Symptomatic infections ')),
            ],
            options={
                'verbose_name': 'Covid19 Symptomatic Infections',
                'verbose_name_plural': 'Covid19 Symptomatic Infections',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Covid19PreventativeBehaviours',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date and Time')),
                ('people_sneezing', models.CharField(choices=[('strongly_disagree', 'Strongly disagree'), ('undecided', 'Undecided'), ('strongly_agree', 'Strongly agree')], max_length=20, verbose_name='It really bothers me when people sneeze without covering their mouths')),
                ('avoid_touching', models.CharField(choices=[('strongly_disagree', 'Strongly disagree'), ('undecided', 'Undecided'), ('strongly_agree', 'Strongly agree')], max_length=20, verbose_name='I avoid touching door handles and staircase railing at public locations')),
                ('dislike_face_mask', models.CharField(choices=[('strongly_disagree', 'Strongly disagree'), ('undecided', 'Undecided'), ('strongly_agree', 'Strongly agree')], max_length=20, verbose_name='I dislike wearing face mask because of the way it looks and/or feels')),
                ('temperature', models.CharField(choices=[('strongly_disagree', 'Strongly disagree'), ('undecided', 'Undecided'), ('strongly_agree', 'Strongly agree')], max_length=20, verbose_name="I want people's temperature to be taken before they enter public places")),
                ('crowded_places', models.CharField(choices=[('strongly_disagree', 'Strongly disagree'), ('undecided', 'Undecided'), ('strongly_agree', 'Strongly agree')], max_length=20, verbose_name='I dont mind going to very crowded places')),
                ('self_isolate', models.CharField(choices=[('strongly_disagree', 'Strongly disagree'), ('undecided', 'Undecided'), ('strongly_agree', 'Strongly agree')], max_length=20, verbose_name='I would self-isolate myself at home if needed')),
                ('use_hand_sanitizer', models.CharField(choices=[('strongly_disagree', 'Strongly disagree'), ('undecided', 'Undecided'), ('strongly_agree', 'Strongly agree')], max_length=20, verbose_name="I frequently use hand sanitizer and/or wash my hands after shaking someone's hand")),
                ('avoid_public_places', models.CharField(choices=[('strongly_disagree', 'Strongly disagree'), ('undecided', 'Undecided'), ('strongly_agree', 'Strongly agree')], max_length=20, verbose_name='I avoid going to public places')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='esr21_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'COVID Preventative Behaviours',
                'verbose_name_plural': 'COVID Preventative Behaviours',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ConcomitantMedication',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date and Time')),
                ('administered_date', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of administration (DD MMM YYYY):')),
                ('medication_name', models.CharField(max_length=40, verbose_name='Name of concomitant medication ')),
                ('atc_code', models.CharField(max_length=30, verbose_name='ATC code')),
                ('dose', models.DecimalField(decimal_places=2, max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Dose')),
                ('unit', models.CharField(choices=[('ampule', 'Ampule'), ('bag', 'Bag'), ('bar', 'Bar'), ('bolus', 'Bolus'), ('bottle', 'Bottle'), ('box', 'Box'), ('can', 'Can'), ('capsule', 'Capsule'), ('cartridge', 'Cartridge'), ('coat', 'Coat'), ('container', 'Container'), ('cylinder', 'Cylinder'), ('disk', 'Disk'), ('drum', 'Drum'), ('grain', 'Grain'), ('homeopathic_dilution', 'Homeopathic dilution'), ('implant', 'Implant'), ('inch', 'Inch'), ('inhalation', 'Inhalation'), ('jar', 'Jar'), ('kallikrein_inhibitor_unit', 'Kallikrein inhibitor unit'), ('kit', 'Kit'), ('L', 'L'), ('MCi', 'MCi'), ('mEq', 'mEq'), ('mmol', 'mmol'), ('ng', 'ng'), ('nmol', 'nmol'), ('ounce', 'Ounce'), ('uCi', 'uCi'), ('um', 'um'), ('umol', 'umol'), ('gram', 'gram'), ('mg', 'mg'), ('mg/dL', 'mg/dL'), ('puff', 'Puff'), ('Tbsp', 'Tbsp'), ('Tsp', 'tsp'), ('cup', 'cup'), ('drop', 'Drop'), ('iu_l', 'IU / L'), ('mg_m2', 'mg / m2'), ('ug', 'Ug'), ('patch_dosing_unit', 'Patch Dosing Unit'), ('pellet_dosing_unit', 'Pellet Dosing Unit'), ('%', '%'), ('%_v_v)', '% (v / v)'), ('%_w_v)', '% (w / v)'), ('%_w_w)', '% (w / w)'), ('spray', 'Spray'), ('tablet', 'Tablet'), ('ug_l', 'ug / L'), ('iu_ml', 'IU / mL'), ('OTHER', 'Other'), ('gtt', 'gtt'), ('iu_kg', 'IU / kg'), ('kiu', 'kIU'), ('mbq', 'MBq'), ('mg_kg', 'mg / kg'), ('ug_kg', 'ug / kg'), ('ug_m2', 'ug / m2'), ('iu', 'IU'), ('suppository', 'Suppository')], max_length=25, verbose_name='Unit')),
                ('unit_other', models.CharField(blank=True, max_length=25, null=True, verbose_name='Other, specify')),
                ('frequency', models.CharField(choices=[('QD', 'QD'), ('OD', 'OD'), ('BID', 'BID'), ('TID', 'TID'), ('QID', 'QID'), ('QOD', 'QOD'), ('PRN', 'PRD'), ('Once', 'Once'), ('one_time_per_week', 'One Time Per Week'), ('every_month', 'Every Month'), ('QH', 'QH'), ('Q2H', 'Q2H'), ('Q3H', 'Q3H'), ('Q4H', 'Q4H'), ('Q6H', 'Q6H'), ('Q8H', 'Q8H'), ('Q12H', 'Q12H'), ('unknown', 'Unknown'), ('OTHER', 'Other')], max_length=25, verbose_name='Frequency')),
                ('frequency_other', models.CharField(blank=True, max_length=25, null=True, verbose_name='Other, specify')),
                ('route', models.CharField(choices=[('auricular_otic', 'Auricular(otic)'), ('buccal', 'Buccal'), ('endotracheal', 'Endotracheal'), ('epidural', 'Epidural'), ('intra-articular', 'Intra-articular'), ('intracardiac', 'Intracardiac'), ('intradermal', 'Intradermal'), ('intralesional', 'Intralesional'), ('intramuscular', 'Intramuscular'), ('intraocular', 'Intraocular'), ('intraperitoneal', 'Intraperitoneal'), ('intrathecal', 'Intrathecal'), ('intratumor', 'Intratumor'), ('intravenous', 'Intravenous'), ('intravenous_bolus', 'Intravenous Bolus'), ('intravenous_drip', 'Intravenous Drip'), ('irrigation', 'Irrigation'), ('microdialysis', 'Microdialysis'), ('nasal', 'Nasal'), ('ophthalmic', 'Ophthalmic'), ('oral', 'Oral'), ('parenteral', 'Parenteral'), ('percutaneous', 'Percutaneous'), ('rectal', 'Rectal'), ('respiratory_inhalation', 'Respiratory Inhalation'), ('subcutaneous', 'Subcutaneous'), ('sublingual', 'Sublingual'), ('topical', 'Topical'), ('transdermal', 'Transdermal'), ('vaginal', 'Vaginal'), ('unknown', 'Unknown'), ('OTHER', 'Other')], max_length=25, verbose_name='Route')),
                ('route_other', models.CharField(blank=True, max_length=25, null=True, verbose_name='Other, specify')),
                ('reason_of_use', models.TextField(verbose_name='Reason for use')),
                ('ongoing', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Ongoing')),
                ('stop_date', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name='Stop Date (DD MMM YYYY)')),
                ('prohibited', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Is concomitant medication prohibited?')),
                ('reason_prohibited', models.TextField(help_text='The use of concomitant medications and/or vaccines,  will not definitively require withdrawal of the participant from the study, but may determine a participant’s eligibility to receive a second dose or evaluability in the per-protocol analysis set - please refer to the Protocol for further guidance', verbose_name='Prohibited medication, further details, i.e.,Specify, reason')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='esr21_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Concomitant Medication',
                'verbose_name_plural': 'Concomitant Medication',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AdverseEventRecord',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('ae_name', models.CharField(max_length=100, verbose_name='Name of the Adverse Event')),
                ('event_details', models.TextField(blank=True, null=True, verbose_name='Details of the Adverse Event')),
                ('meddra_pname', models.CharField(blank=True, max_length=100, null=True, verbose_name='MedDRA Preferred Name of the Adverse Event')),
                ('meddra_pcode', models.CharField(blank=True, max_length=50, null=True, verbose_name='MedDRA Preferred Code of the Adverse Event')),
                ('meddra_version', models.PositiveIntegerField(blank=True, null=True, verbose_name='MedDRA version')),
                ('start_date', models.DateField(validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Adverse Event start date')),
                ('stop_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Adverse Event stop date')),
                ('substance_hypersensitivity', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Any hypersensitivity to the active substance or to any of the excipients?')),
                ('status', models.CharField(choices=[('resolved', 'Resolved'), ('ongoing', 'Ongoing'), ('death', 'Death')], max_length=10, verbose_name='Status of the Adverse Event')),
                ('ae_grade', models.CharField(choices=[('mild', 'Mild (Grade 1)'), ('moderate', 'Moderate (Grade 2)'), ('severe', 'Severe (Grade 3)'), ('life_threatening', 'Life-threatening (Grade 4)'), ('fatal', 'Fatal (Grade 5)')], max_length=30, verbose_name='Common Terminology Criteria for Adverse Events (CTCAE) grading')),
                ('study_treatmnt_rel', models.CharField(choices=[('related', 'Related'), ('not_related', 'Not Related')], max_length=15, verbose_name='Relationship to study treatment')),
                ('nonstudy_treatmnt_rel', models.CharField(choices=[('related', 'Related'), ('not_related', 'Not Related')], max_length=15, verbose_name='Relationship to non-study treatment')),
                ('studyproc_treatmnt_rel', models.CharField(choices=[('related', 'Related'), ('not_related', 'Not Related'), ('N/A', 'Not Applicable')], max_length=15, verbose_name='Relationship to study procedure')),
                ('action_taken', models.CharField(choices=[('dose_not_changed', 'Dose not changed'), ('drug_withdrawal', 'Drug withdrawal'), ('N/A', 'N/A'), ('unknown', 'unknown')], max_length=25, verbose_name='Action taken with study treatment')),
                ('outcome', models.CharField(blank=True, choices=[('not_resolved', 'Not recovered/ not resolved'), ('resolved', 'Recovered / resolved'), ('resolved_with_sequelae', 'Recovered / resolved with sequelae'), ('resolving', 'Recovering / resolving'), ('fatal', 'Fatal / Death'), ('unknown', 'unknown')], max_length=50, null=True, verbose_name='Outcome')),
                ('sequelae_specify', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=100, null=True, verbose_name='If Recovered / resolved with sequelae, please specify sequelae')),
                ('serious_event', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Was this considered to be a Serious Adverse Event?')),
                ('special_interest_ae', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='(If Yes, check all serious criteria that apply on the corresponding SAE form.)', max_length=3, verbose_name='Was the event an AE of Special Interest?')),
                ('medically_attended_ae', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Was the event a Medically attended AE?')),
                ('maae_specify', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=100, null=True, verbose_name='If MAAE, specify')),
                ('treatment_given', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Was treatment given?')),
                ('treatmnt_given_specify', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If yes, specify details')),
                ('ae_study_discontinued', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Did the AE cause the subject to discontinue from the study?')),
                ('discontn_dt', models.DateField(blank=True, null=True, verbose_name='Date of discontinuation')),
                ('covid_related_ae', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is this a COVID-19 related AE?')),
                ('adverse_event', models.ForeignKey(max_length=25, on_delete=django.db.models.deletion.PROTECT, to='esr21_subject.adverseevent')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'Adverse Event Record',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='adverseevent',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='esr21_subject.subjectvisit'),
        ),
        migrations.CreateModel(
            name='SubjectRequisition',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('requisition_identifier', models.CharField(max_length=50, unique=True, verbose_name='Requisition Id')),
                ('identifier_prefix', models.CharField(editable=False, max_length=50, null=True, unique=True)),
                ('primary_aliquot_identifier', models.CharField(editable=False, max_length=18, null=True, unique=True)),
                ('clinic_verified', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, null=True)),
                ('clinic_verified_datetime', models.DateTimeField(null=True)),
                ('is_drawn', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If No, provide a reason below', max_length=3, verbose_name='Was a specimen drawn?')),
                ('reason_not_drawn_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('protocol_number', models.CharField(editable=False, max_length=10, null=True)),
                ('clinician_initials', edc_base.model_fields.custom_fields.InitialsField(blank=True, help_text='Type 2-3 letters, all in uppercase and no spaces', max_length=3, null=True, verbose_name='Initials')),
                ('specimen_type', models.CharField(blank=True, max_length=25, null=True, verbose_name='Specimen type')),
                ('received', models.BooleanField(default=False)),
                ('received_datetime', models.DateTimeField(blank=True, null=True)),
                ('processed', models.BooleanField(default=False)),
                ('processed_datetime', models.DateTimeField(blank=True, null=True)),
                ('packed', models.BooleanField(default=False)),
                ('packed_datetime', models.DateTimeField(blank=True, null=True)),
                ('shipped', models.BooleanField(default=False)),
                ('shipped_datetime', models.DateTimeField(blank=True, null=True)),
                ('sample_id', models.CharField(max_length=50, verbose_name='LIS generated Sample Identifier')),
                ('requisition_datetime', models.DateTimeField(default=django.utils.timezone.now, validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Requisition Date and Time')),
                ('study_site', models.CharField(choices=[('greater_francistown', 'Greater Francistown'), ('greater_gaborone', 'Greater Gaborone'), ('ngami', 'Ngami'), ('greater_selibe_phikwe', 'Greater Selibe Phikwe'), ('serowe_or_palapye', 'Serowe/Palapye')], max_length=25, verbose_name='Study site')),
                ('item_count', models.PositiveIntegerField(blank=True, help_text='Number of tubes, samples, etc being sent for this test/order only. Determines number of labels to print', null=True, verbose_name='Total number of items')),
                ('estimated_volume', models.DecimalField(blank=True, decimal_places=2, help_text='If applicable, estimated volume of sample for this test/order. This is the total volume if number of "tubes" above is greater than 1', max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0, message='Cannot be a negative number')], verbose_name='Estimated volume in mL')),
                ('item_type', models.CharField(choices=[('N/A', 'Not applicable'), ('tube', 'Tube'), ('swab', 'Swab'), ('OTHER', 'Other')], default='N/A', max_length=25, verbose_name='Item collection type')),
                ('item_type_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('priority', models.CharField(choices=[('normal', 'Normal'), ('urgent', 'Urgent')], default='normal', max_length=25, verbose_name='Priority')),
                ('reason_not_drawn', models.CharField(choices=[('not_collected', 'Not collected'), ('not_required', 'Not required at this visit'), ('measurement_skipped', 'Measurement skipped at this visit'), ('subject_refused', 'Subject refused'), ('equipment_malfunction', 'Equipment malfunction'), ('staff_unavailable', 'Staff unavailable'), ('no_further_information', 'No further information'), ('OTHER', 'Other, specify'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='If not drawn, please explain')),
                ('drawn_datetime', models.DateTimeField(blank=True, help_text='If not drawn, leave blank.', null=True, validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Date / Time Specimen Drawn')),
                ('urgent_specify', models.TextField(blank=True, max_length=250, null=True, verbose_name='If urgent, please specify')),
                ('comments', models.TextField(blank=True, max_length=350, null=True)),
                ('panel', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='edc_lab.panel')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='esr21_subject.subjectvisit')),
            ],
            options={
                'unique_together': {('panel', 'subject_visit')},
            },
        ),
        migrations.CreateModel(
            name='SpecialInterestAdverseEventRecord',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('aesi_name', models.CharField(max_length=100, verbose_name='Name of the AESI')),
                ('meddra_pname', models.CharField(blank=True, max_length=100, null=True, verbose_name='MedDRA Preferred Name of the AESI')),
                ('meddra_pcode', models.CharField(blank=True, max_length=50, null=True, verbose_name='MedDRA Preferred Code of the AESI')),
                ('meddra_version', models.PositiveIntegerField(verbose_name='MedDRA version')),
                ('start_date', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name='AESI start date')),
                ('end_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='AESI end date')),
                ('date_aware_of', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date investigator became aware of AESI')),
                ('aesi_category', models.CharField(choices=[('generalized_convulsion', 'Generalized convulsion'), ('guillain_barre_syndrome', 'Guillain-Barre syndrome'), ('acute_disseminated', 'Acute disseminated encephalomyelitis'), ('other_neuro_events', 'Other neurologic events'), ('thrombotic', 'Thrombotic or thromboembolic or neurovascular events'), ('Thrombocytopenia', 'Thrombocytopenia'), ('vasculitides', 'Vasculitides'), ('anaphylaxis', 'Anaphylaxis'), ('vaccine_assoc_resp_disease', 'Vaccine-associated enhanced respiratory disease'), ('immune_mediated_cond', 'Potential immune-mediated conditions')], max_length=50, verbose_name='AESI category')),
                ('rationale', models.CharField(max_length=100, verbose_name="Investigator's rationale for Study Treatment being related to the events")),
                ('describe_aesi_treatmnt', models.TextField(max_length=200, verbose_name='Describe treatment for event including medications')),
                ('additional_info', models.TextField(max_length=200, verbose_name='Additional information (Symptoms, course, results, diagnostic and other comments)')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('special_interest_adverse_event', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='esr21_subject.specialinterestadverseevent')),
            ],
            options={
                'verbose_name': 'Adverse Event of Special Interest',
                'verbose_name_plural': 'Adverse Events of Special Interest',
                'unique_together': {('special_interest_adverse_event', 'start_date', 'end_date', 'aesi_category')},
            },
        ),
        migrations.CreateModel(
            name='SeriousAdverseEventRecord',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('sae_details', models.TextField(verbose_name='Details of the SAE')),
                ('sae_name', models.CharField(max_length=100, verbose_name='Name of the SAE')),
                ('meddra_pname', models.CharField(blank=True, max_length=100, null=True, verbose_name='MedDRA Preferred Name of the SAE')),
                ('meddra_pcode', models.CharField(blank=True, max_length=50, null=True, verbose_name='MedDRA Preferred Code OF the SAE')),
                ('meddra_version', models.PositiveIntegerField(verbose_name='MedDRA version')),
                ('sae_intensity', models.CharField(choices=[('mild', 'Mild'), ('moderate', 'Moderate'), ('severe', 'Severe')], max_length=10, verbose_name='Intensity of the SAE')),
                ('start_date', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name='SAE start date')),
                ('resolution_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='SAE end date')),
                ('date_aware_of', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date investigator became aware of SAE')),
                ('admission_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='If hospitalized, Date of Admission')),
                ('discharge_date', models.DateField(blank=True, null=True, verbose_name='If hospitalized, Date of Discharge')),
                ('incapacity_specify', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=100, null=True, verbose_name='Specify persistent or significant disability/incapacity')),
                ('medical_event_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=100, null=True, verbose_name='If, Other important medical event, specify')),
                ('rationale', models.CharField(max_length=100, verbose_name="Investigator's rationale for Study Treatment being Related to the events")),
                ('describe_sae_treatmnt', models.TextField(max_length=200, verbose_name='Describe treatment for event including medications')),
                ('test_performed', models.TextField(max_length=200, verbose_name='List all diagnostic tests that were performed to confirm event')),
                ('additional_info', models.TextField(max_length=200, verbose_name='Additional information (for example: history of presenting illness, course of illness, complications, risk factors and/or other contributing factors)')),
                ('serious_adverse_event', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='esr21_subject.seriousadverseevent')),
                ('seriousness_criteria', models.ManyToManyField(help_text='(check all that apply)', to='esr21_subject.SAECriteria', verbose_name='Select seriousness criteria')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'Serious Adverse Event Record',
                'unique_together': {('serious_adverse_event', 'start_date', 'date_aware_of')},
            },
        ),
        migrations.CreateModel(
            name='OnScheduleIll',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(editable=False)),
                ('onschedule_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future])),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('schedule_name', models.CharField(blank=True, max_length=25, null=True)),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'unique_together': {('subject_identifier', 'schedule_name')},
            },
            managers=[
                ('onsite', edc_base.sites.managers.CurrentSiteManager()),
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='OffScheduleIll',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, unique=True, verbose_name='Subject Identifier')),
                ('report_datetime', models.DateTimeField(editable=False)),
                ('offschedule_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Date and time subject taken off schedule')),
                ('schedule_name', models.CharField(blank=True, max_length=25, null=True)),
                ('consent_version', models.CharField(blank=True, max_length=2, null=True)),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'unique_together': {('subject_identifier', 'offschedule_datetime')},
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='OffSchedule',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, unique=True, verbose_name='Subject Identifier')),
                ('report_datetime', models.DateTimeField(editable=False)),
                ('offschedule_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Date and time subject taken off schedule')),
                ('schedule_name', models.CharField(blank=True, max_length=25, null=True)),
                ('consent_version', models.CharField(blank=True, max_length=2, null=True)),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'unique_together': {('subject_identifier', 'offschedule_datetime')},
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='MedicalDiagnosis',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('start_date', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name='Start Date (DD/MMM/YYYY)')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date (DD/MMM/YYYY)')),
                ('ongoing', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Ongoing')),
                ('condition_related_meds', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Is the subject taking medication related to this condition?')),
                ('rel_conc_meds', models.TextField(max_length=150, verbose_name='Related concomitant medications')),
                ('medical_history', models.ForeignKey(max_length=25, on_delete=django.db.models.deletion.PROTECT, to='esr21_subject.medicalhistory', verbose_name='Medical History Diagnosis')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'Medical Diagnosis',
                'verbose_name_plural': 'Medical Diagnoses',
                'unique_together': {('medical_history', 'start_date', 'end_date')},
            },
        ),
        migrations.CreateModel(
            name='InformedConsent',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('identity', django_crypto_fields.fields.identity_field.IdentityField(help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Identity number')),
                ('confirm_identity', django_crypto_fields.fields.identity_field.IdentityField(help_text='Retype the identity number (Encryption: RSA local)', max_length=71, null=True)),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name')),
                ('dob', models.DateField(null=True, verbose_name='Date of birth')),
                ('is_dob_estimated', edc_base.model_fields.date_estimated.IsDateEstimatedField(choices=[('-', 'No'), ('D', 'Yes, estimated the Day'), ('MD', 'Yes, estimated Month and Day'), ('YMD', 'Yes, estimated Year, Month and Day')], help_text='If the exact date is not known, please indicate which part of the date is estimated.', max_length=25, null=True, verbose_name='Is date of birth estimated?')),
                ('guardian_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if participant is a minor.<BR>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Guardian's last and first name")),
                ('subject_type', models.CharField(max_length=25)),
                ('is_incarcerated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="( if 'Yes' STOP participant cannot be consented )", max_length=3, null=True, validators=[edc_consent.validators.eligible_if_no], verbose_name='Is the participant under involuntary incarceration?')),
                ('is_literate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'No' provide witness's name on this form and signature on the paper document.", max_length=3, verbose_name='Is the participant literate?')),
                ('witness_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if participant is illiterate.<br>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Witness's last and first name")),
                ('language', models.CharField(choices=[('tn', 'Setswana'), ('en', 'English')], help_text='The language used for the consent process will also be used during data collection.', max_length=25, verbose_name='Language of consent')),
                ('is_verified', models.BooleanField(default=False, editable=False)),
                ('is_verified_datetime', models.DateTimeField(editable=False, null=True)),
                ('verified_by', models.CharField(editable=False, max_length=25, null=True)),
                ('report_datetime', models.DateTimeField(editable=False, null=True)),
                ('version', models.CharField(editable=False, help_text="See 'Consent Type' for consent versions by period.", max_length=10, verbose_name='Consent version')),
                ('updates_versions', models.BooleanField(default=False)),
                ('sid', models.CharField(blank=True, editable=False, help_text='Used for randomization against a prepared rando-list.', max_length=15, null=True, verbose_name='SID')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('dm_comment', models.CharField(editable=False, help_text='see also edc.data manager.', max_length=150, null=True, verbose_name='Data Management comment')),
                ('consent_identifier', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this consent instance')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text='Ensure initials consist of letters only in upper case, no spaces. (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('screening_identifier', models.CharField(max_length=50, verbose_name='Screening identifier')),
                ('consent_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of consent.', verbose_name='Consent date and time')),
                ('identity_type', models.CharField(choices=[('national_identity_card', 'National Identity Card'), ('national_identity_card_rcpt', 'National Identity Card Receipt'), ('passport', 'Passport'), ('OTHER', 'Other')], max_length=30, verbose_name='What type of identity number is this?')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('OTHER', 'Other')], max_length=5, null=True, verbose_name='Gender')),
                ('hiv_testing_consent', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Participant is not eligible if no', max_length=3, validators=[edc_consent.validators.eligible_if_yes], verbose_name='Do you consent to having HIV testing?')),
                ('optional_sample_collection', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Do you consent to optional sample collection?')),
                ('consent_to_participate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Participant is not eligible if no', max_length=3, validators=[edc_consent.validators.eligible_if_yes], verbose_name='Do you consent to participate in the study?')),
                ('gender_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'Informed Consent',
                'verbose_name_plural': 'Informed Consent',
                'ordering': ('created',),
                'get_latest_by': 'consent_datetime',
                'abstract': False,
                'unique_together': {('subject_identifier', 'version'), ('subject_identifier', 'screening_identifier', 'version'), ('first_name', 'dob', 'initials', 'version')},
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
    ]
